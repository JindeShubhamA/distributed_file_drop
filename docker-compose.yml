version: '3.1'

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
    - 5672:5672
    - 15672:15672
    networks:
    - docker_network

  postgresdb:
    image: postgres
    restart: always
    ports:
    - 5432:5432
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: user_auth
    volumes:
    - ./postgres:/var/lib/postgresql/data
    networks:
    - docker_network

  postgresdb-test:
      image: postgres
      restart: always
      ports:
      - 5433:5432
      environment:
        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: postgres
        POSTGRES_DB: user_auth_test
      volumes:
      - ./postgres-test:/var/lib/postgresql/data
      networks:
      - docker_network

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - postgresdb
    networks:
    - docker_network

  auth:
    build: back_end/src/auth
    ports:
      - 4000:4000
    depends_on:
      - postgresdb
    links:
      - postgresdb
    environment:
      DATABASE_HOST: postgresdb
      IN_CONTAINER_FLAG: 1
    networks:
    - docker_network

    command: ["./wait-for-it.sh", "postgresdb:5432/auth_db", "--", "python", "./app.py"]

  socket-gateway:
    build: back_end/src/gateway
    ports:
    - 5000:5000
    networks:
    - docker_network
    environment:
      IN_CONTAINER_FLAG: 1

  file-uploader:
    build: back_end/src/file_uploader
    ports:
      - 3500:3500
    links:
      - redis
    networks:
      - docker_network
    environment:
      IN_CONTAINER_FLAG: 1

  front-end:
    build:
      context: front_end
      dockerfile: Dockerfile.prod
    ports:
      - 3000:80
    stdin_open: true
    networks:
      - docker_network

  redis:
    image: "redis:alpine"
    command: redis-server
    ports:
    - 6379:6379
    volumes:
    - ./redis-data:/var/lib/redis
    - ./redis.conf:/usr/local/etc/redis/redis.conf

#    environment:
#    - REDIS_REPLICATION_MODE=master
    networks:
    - docker_network

  etcd:
    image: 'bitnami/etcd:latest'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    volumes:
      - ./etcd/etcd.conf.yml:/opt/bitnami/etcd/conf/etcd.conf.yml
    ports:
      - 2379:2379
      - 2380:2380
    networks:
      - docker_network
  fsm:
    build: ./back_end/fileServiceMngr/app
    container_name: fsm
    links:
      - mongodb
    depends_on:
      - mongodb
      - rabbitmq
      - redis
    ports:
      - 4500:4500
    volumes:
    - ./logs:/logs
    networks:
    - docker_network
    environment:
      IN_CONTAINER_FLAG: 1

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: always
    ports:
      - 27017:27017
    networks:
    - docker_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
    networks:
    - docker_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    container_name: kibana
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
      - logstash
    networks:
    - docker_network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.6.2
    container_name: logstash
    links:
      - elasticsearch
    volumes:
      - .:/etc/logstash
      - ./logs:/logs
    command: logstash -f /etc/logstash/back_end/fileServiceMngr/app/logstash.conf
    ports:
       - 9600:9600
    depends_on:
      - elasticsearch
    networks:
    - docker_network

networks:
  docker_network:
    driver: bridge
